import XMonad
import XMonad.Config.Xfce
import qualified Data.Map as M
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ICCCMFocus
import XMonad.Hooks.SetWMName
 
import XMonad.Layout.Circle
import XMonad.Layout.Grid
import XMonad.Layout.Spiral
import XMonad.Layout.Cross
import XMonad.Layout.ThreeColumns
import XMonad.Layout.MultiColumns
import XMonad.Layout.LayoutBuilder
import XMonad.Layout.Spacing
import XMonad.Layout.Master
import XMonad.Layout.Gaps
import XMonad.Layout.LimitWindows
import XMonad.Layout.ToggleLayouts
import XMonad.Layout.ResizableTile
import XMonad.Actions.GridSelect
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Combo
import XMonad.Layout.IfMax
import XMonad.Actions.CopyWindow

import Data.Monoid
import System.Exit

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO


 
import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import XMonad.ManageHook
import XMonad.Util.NamedScratchpad



myTerminal = "xfce4-terminal"

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

myWorkspaces    = ["0","1","2","3","4","5","6","7","8","9"]

myNormalBorderColor  = "#000000"
myFocusedBorderColor = "#191919"

scratchpads = [
  -- run htop in xterm, find it by title, use default floating window placement
      NS "htop" (myTerminal ++ " -T htop -e htop") (title =? "htop") (customFloating $ W.RationalRect (1/8) (1/8) (6/8) (7/8)),

  -- run vim with notes.tx
      NS "vim" (myTerminal ++ " -T vim -e 'vim /tmp/notes.txt'") (title =? "vim") (customFloating $ W.RationalRect (1/8) (1/8) (6/8) (7/8)),

  -- run gvim, find by role, don't float
      NS "notes" "gvim --role notes ~/notes.txt" (role =? "notes") nonFloating
  ] where role = stringProperty "WM_WINDOW_ROLE"




myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
 
    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
 
    -- launch dmenu
    , ((modm,               xK_p     ), spawn "exe=`dmenu_path | dmenu -fn 'roboto' -sf '#ffffff'  -sb '#c43c00' -nb '#ff6d00'  -nf '#000000'` && eval \"exec $exe\"")

    , ((modm, xK_g), goToSelected defaultGSConfig)
 
    -- screenshooter
    , ((modm, xK_s     ), spawn "xfce4-screenshooter")

    , ((controlMask .|. mod1Mask, xK_Delete), namedScratchpadAction scratchpads "htop")
    , ((modm .|. shiftMask, xK_n), namedScratchpadAction scratchpads "vim")

    -- lock screen
    , ((modm .|. shiftMask, xK_l     ), spawn "i3lock --clock --indicator --image $HOME/.i3lock/solarsystem_wp.png --insidevercolor=ffffff00 --insidewrongcolor=ffffff00 --insidecolor=ffffff00 --ringvercolor=aaaaaaff  --ringwrongcolor=aaaaaaff --ringcolor=eeeeeeff --linecolor=ffffff77 --separatorcolor=00000000 --textcolor=ffffff77 --keyhlcolor=555555ff --bshlcolor=555555ff --line-uses-inside --timesize=20 --indpos=\"x+(w/4.85):y+(h/2)\" --radius=184 --timepos=\"ix-203:iy+140\"  --timecolor=aaaaaaff --datestr=\"%A, %d. %b %Y\" --datepos=\"tx:ty+15\" --datecolor=aaaaaaff --veriftext=\"\" --wrongtext=\"\" --modsize=\"8\" "  )
 
    -- close focused window
    , ((modm .|. shiftMask, xK_c     ), kill)
 
     -- Rotate through the available layout algorithms
    , ((modm,               xK_space ), sendMessage NextLayout)
 
    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
 
    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)
 
    -- Move focus to the next window
    , ((modm,               xK_Tab   ),sendMessage ToggleLayout)
 
    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)
 
    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )
 
    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )
 
    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)
 
    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
 
    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )
 
    -- Shrink the master area
    , ((modm,               xK_h     ), sendMessage Shrink)
 
    -- Expand the master area
    , ((modm,               xK_l     ), sendMessage Expand)
 
    -- Push window back into tiling
    , ((modm,               xK_v     ), (withFocused $ windows . W.sink) >> killAllOtherCopies)
    , ((modm .|. shiftMask, xK_v), (withFocused $ windows . (\y -> W.float y (W.RationalRect (5/8) (5/8) (3/8) (3/8)))) >> (windows copyToAll))
 
    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))
 
    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))
 
    ]
    ++
 
    --
    -- mod-[1..9], Switch to workspace N
    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_0 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++
 
    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_e, xK_r, xK_t] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
 
myLayout = gaps [(U,35), (R,0), (L,0), (D,0)] $ spacing 2 $ normal ||| Full ||| mirrornormal
	where
		-- default tiling algorithm partitions the screen into two panes 
		normal = IfMax 1 Full (multimastered 1 (1/100) (2/3) $ GridRatio (2/3)) 
		mirrornormal = IfMax 1 Full (Mirror $ multimastered 1 (1/100) (2/3) $ GridRatio (2/3)) 
		



-----------------------------------------------------------------------------
-- STARTUPHOOK                                                               
--------------------------------------------------------------------------------
myStartupHook = do
  setWMName "LG3D" --ewmhDesktopsStartup
  spawn "feh --bg-fill ~/Desktop/background-dark.png"
  spawn "compton"
  spawn "polybar main"
  

main = do 
    xmonad $ defaultConfig
              { manageHook = manageDocks <+> manageHook defaultConfig <+> namedScratchpadManageHook scratchpads
              , layoutHook =  avoidStruts $ myLayout --layoutHook defaultConfig
              , handleEventHook = ewmhDesktopsEventHook
              , startupHook = 	myStartupHook
              , modMask     = mod4Mask
	            , terminal           = myTerminal
              , focusFollowsMouse  = myFocusFollowsMouse
	            , workspaces         = myWorkspaces
              , normalBorderColor  = myNormalBorderColor
              , focusedBorderColor = myFocusedBorderColor
              , keys               = myKeys

              }
