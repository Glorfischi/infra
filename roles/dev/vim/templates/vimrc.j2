" ----General Settings----

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=1000       " keep 1000 lines of command line history
set number             " line numbers
set ruler              " show the cursor position all the time
set showcmd            " display incomplete commands
set incsearch          " do incremental searching
set hlsearch
set linebreak          " wrap lines on 'word' boundaries
set scrolloff=3        " don't let the cursor touch the edge of the viewport
set splitright         " Vertical splits use right half of screen
set mouse=a
set wildmenu           " Commandline complete
set encoding=utf-8
set colorcolumn=128

"--Tab settings
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2


syntax on
let g:solarized_termcolors=256
colorscheme peachpuff
set background=dark
set showmatch        " Highlight matchin parenthesis
set laststatus=2     " Allways show status line
set t_Co=256         " color mode 256


let mapleader="\<SPACE>"
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

nnoremap <silent> <A-t> :NERDTreeToggle<CR>

map <A-k> <C-W>-
map <A-j> <C-W>+
map <A-h> <C-W>>
map <A-l> <C-W><
map <A-SPACE> <C-W>v
map <A-.> <C-W>s


nnoremap <Leader>t :terminal<CR>
tnoremap <Esc> <C-\><C-n>

" ----Plugins----
call plug#begin('~/.local/share/nvim/plugged')

" NERDTree
Plug 'scrooloose/nerdtree'

" for auto completion
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

" plugins for general completion
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'
Plug 'yuki-ycino/ncm2-dictionary'

" Fuzzy searching
Plug 'git@github.com:kien/ctrlp.vim.git'
" Open file menu
nnoremap <Leader>o :CtrlP<CR>
" Open buffer menu
nnoremap <Leader>b :CtrlPBuffer<CR>
" Open most recently used files
nnoremap <Leader>f :CtrlPMRUFiles<CR>

"" airline is a better status line and a tab-bar for nvim.
Plug 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 2
let g:airline_powerline_fonts = 0
let g:airline_theme= 'powerlineish'

" airline_themes
Plug 'vim-airline/vim-airline-themes'

" neomake is a code linting tool that runs in the background.
Plug 'neomake/neomake'

" golang suport
" Plug 'fatih/vim-go'

" LSP support
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'


" --------- adding the following three plugins for Latex ---------
Plug 'lervag/vimtex'
" Plug 'Konfekt/FastFold'
" Plug 'matze/vim-tex-fold'

call plug#end()

" Neomake config
" When writing a buffer (no delay).
call neomake#configure#automake('w')
" When writing a buffer (no delay), and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing (no delay).
call neomake#configure#automake('rw', 1000)
" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 1s; no delay when writing).
call neomake#configure#automake('nrwi', 500)

set hidden " don't ask when swtichen buffers


" --- Latex config ---
let g:Tex_DefaultTargetFormat='pdf'
let g:tex_flavor  = 'latex'
let g:tex_conceal = ''
let g:vimtex_fold_manual = 1
let g:vimtex_latexmk_continuous = 1
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_view_method = 'zathura'
let g:vimtex_quickfix_open_on_warning = 0


" -- LanguageClient config ---
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'python': ['/usr/local/bin/pyls'],
    \ 'go': ['gopls'],
    \ 'cpp': ['clangd', '-background-index',],
    \ 'c': ['clangd', '-background-index',],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
